/* Fnal BIT SQL project. Analyze Digital media store and include tables for artists, albums, media tracks, invoices, and customers joining tables as needed.
*/

-- #1
SELECT
FirstName,
LastName,
CustomerId,
Country
FROM customers
WHERE Country <> "USA";

-- #2
SELECT *
FROM customers
WHERE Country = "Brazil";

-- #3
SELECT
customers.FirstName,
customers.LastName,
invoices.InvoiceId,
invoices.InvoiceDate,
invoices.BillingCountry
FROM customers
    LEFT JOIN invoices ON customers.customerid = invoices.CustomerId
WHERE customers.Country = "Brazil";

-- #4
SELECT *
FROM employees
WHERE title = "Sales Support Agent";

-- #5
SELECT DISTINCT
BillingCountry
FROM invoices;

-- #6
SELECT
invoices.invoiceID,
employees.FirstName,
employees.LastName
FROM invoices
    INNER JOIN customers ON invoices.CustomerId = customers.CustomerId
    INNER JOIN employees ON employees.EmployeeId = customers.SupportRepId;

-- #7
SELECT 
customers.FirstName AS 'Cust. First Name',
customers.LastName AS 'Cust. Last Name',
customers.Country,
employees.FirstName AS 'Sales Agent First Name',
employees.LastName AS 'Sales Agent Last Name',
invoices.Total 
FROM customers
    INNER JOIN employees ON customers.SupportRepId = employees.EmployeeId
    INNER JOIN invoices ON customers.CustomerId = invoices.CustomerId;

-- #8
SELECT
COUNT(invoiceId) AS "Total Invoices 2009"
FROM invoices
Where InvoiceDate LIKE '%2009%';

-- #9
SELECT
ROUND(SUM(Total), 2) AS "Revenue 2009"
FROM invoices
Where InvoiceDate LIKE '%2009%';

-- #10
SELECT
tracks.Name,
invoice_items.InvoiceLineId
FROM tracks
    INNER JOIN invoice_items ON invoice_items.TrackId = tracks.TrackId;

-- #11
SELECT
artists.Name AS Artist,
tracks.Name AS Track,
invoice_items.InvoiceLineId
FROM tracks
    INNER JOIN invoice_items ON invoice_items.TrackId = tracks.TrackId
    LEFT JOIN albums ON albums.AlbumId = tracks.AlbumId
    LEFT JOIN artists ON artists.ArtistId = albums.ArtistId;

-- #12
SELECT
tracks.Name AS Track,
albums.Title AS "Album Title",
media_types.Name AS "Media Type",
genres.Name AS Genre
FROM tracks
    INNER JOIN albums ON albums.AlbumId = tracks.AlbumId
    LEFT JOIN media_types ON media_types.MediaTypeId = tracks.MediaTypeId
    LEFT JOIN genres ON genres.GenreId = tracks.GenreId;

-- #13
SELECT
employees.FirstName,
employees.LastName,
ROUND(SUM(invoices.Total), 2) AS "Total Sales"
FROM invoices
    INNER JOIN customers ON customers.CustomerId = invoices.CustomerId
    INNER JOIN employees ON employees.EmployeeId = customers.SupportRepId
WHERE title = "Sales Support Agent"
GROUP BY employees.FirstName;

-- #14
SELECT
employees.FirstName,
employees.LastName,
ROUND(SUM(invoices.Total), 2) AS "Total Sales"
FROM invoices
    INNER JOIN customers ON customers.CustomerId = invoices.CustomerId
    INNER JOIN employees ON employees.EmployeeId = customers.SupportRepId
WHERE title = "Sales Support Agent" AND invoices.InvoiceDate LIKE '2009%' 
GROUP BY employees.FirstName
ORDER BY (round(sum(invoices.Total), 2))  DESC LIMIT 1;

-- #15
SELECT
COUNT(CustomerId) AS "Total Customers",
Country
FROM customers
GROUP BY Country
ORDER BY COUNT(CustomerId) DESC;

-- #16
SELECT
customers.Country,
ROUND(SUM(Invoices.Total), 2) As "Total Sales"
FROM customers
    INNER JOIN invoices ON invoices.CustomerId = customers.CustomerId
GROUP BY Country
ORDER BY ROUND(SUM(Invoices.Total), 2) DESC;

-- #17
SELECT
customers.Country,
genres.Name AS Genre
FROM customers
    INNER JOIN invoices ON invoices.CustomerId = customers.CustomerId
    INNER JOIN invoice_items ON invoice_items.InvoiceId = invoices.InvoiceId
    INNER JOIN tracks ON tracks.TrackId = invoice_items.TrackId
    INNER JOIN genres ON genres.GenreId = tracks.GenreId
GROUP BY genres.Name;
